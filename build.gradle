plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = 'io.github.shenyubao'
version = '0.1-SNAPSHOT'
//version = "0.1.0"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
//    Log
    implementation('org.slf4j:slf4j-api:1.7.36')
    implementation('org.slf4j:jcl-over-slf4j:1.7.25')
    implementation('org.slf4j:log4j-over-slf4j:1.7.25')

    implementation('com.alibaba.fastjson2:fastjson2:2.0.23')
    implementation('org.apache.commons:commons-lang3:3.12.0')
    implementation('com.google.guava:guava:19.0')
    implementation('com.knuddels:jtokkit:0.5.0')

//    Vector
    implementation('io.milvus:milvus-sdk-java:2.2.7')

//    Vector / DocStore
    implementation('org.mybatis:mybatis:3.4.2')
    implementation('org.mybatis:mybatis-spring:1.3.0')
    implementation('com.alibaba:druid:1.1.23')
//    implementation('org.springframework:spring-context:4.3.25.RELEASE')

    //    Tool:SERPAPI
//    implementation 'com.github.serpapi:google-search-results-java:2.0.2'

//    retrofit2
    implementation('com.squareup.retrofit2:retrofit:2.9.0')
    implementation('com.squareup.retrofit2:adapter-rxjava2:2.9.0')
    implementation('com.squareup.retrofit2:converter-jackson:2.9.0')

//    OKHTTP
    implementation('com.squareup.okhttp3:okhttp:4.9.3')
    implementation('com.squareup.okhttp3:okhttp-sse:4.9.3')
    implementation('com.squareup.okhttp3:logging-interceptor:4.9.3')

    compileOnly('org.projectlombok:lombok:1.18.24')
    annotationProcessor('org.projectlombok:lombok:1.18.24')

    implementation('com.alibaba:dashscope-sdk-java:2.3.1')

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'


    //test
    implementation('com.alibaba.nls:nls-sdk-transcriber:2.2.1')
    implementation('com.aliyun:aliyun-java-sdk-core:3.7.1')

}

test {
    useJUnitPlatform()
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}
task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    description = "Generates project-level javadoc for use in -javadoc jar"

    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.version = true
    options.header = project.name
    options.addStringOption('Xdoclint:none', '-quiet')

    // suppress warnings due to cross-module @see and @link references;
    // note that global 'api' task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
    options.encoding = "UTF-8"  //编码一定要配置否则直接出错
    options.charSet = 'UTF-8'
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.name
            version "${version}"
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "javachain"
                description = "Building applications with LLMs through composabilityt"
                url = "https://github.com/shenyuabo/javachain"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "ssybb1988"
                        name = "shenyubao"
                        email = "ssybb1988@gmail.com"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/shenyubao/javachain.git"
                    developerConnection = "scm:git:https://github.com/shenyubao/javachain.git"
                    url = "https://github.com/shenyubao/javachain"
                }
            }
        }
    }
    repositories {
        maven {
            name 'sonatypeRepository'
            url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = "${nexus_username}"
                password = "${nexus_password}"
            }
        }
        maven {
            name = 'sonatypeSnapshotRepository'
            url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            credentials {
                username = "${nexus_username}"
                password = "${nexus_password}"
            }
        }
    }
}

// must after publishing
signing {
//    useGpgCmd()
    sign configurations.archives
    sign publishing.publications.mavenJava
}